defmodule TodoApp.Todo.Entry do
  # Using Ash.Resource turns this module into an Ash resource.
  use Ash.Resource,
    # Tells Ash you want this resource to store its data in Postgres.
    data_layer: AshPostgres.DataLayer,
    notifiers: [Ash.Notifier.PubSub]

  pub_sub do
    module TodoAppWeb.Endpoint
    prefix "entries"

    publish :done, ["done", :id]
    publish :restore, ["restore", :id]
    publish :create, ["created"]
    publish :destroy, ["deleted", :id]
  end

  # The Postgres keyword is specific to the AshPostgres module.
  postgres do
    # Tells Postgres what to call the table
    table "entries"
    # Tells Ash how to interface with the Postgres table
    repo TodoApp.Repo
  end

  # Defines convenience methods for
  # interacting with the resource programmatically.
  code_interface do
    define_for TodoApp.Todo
    define :create, action: :create
    define :read_all, action: :read
    define :update, action: :update
    define :destroy, action: :destroy
    define :get_by_id, args: [:id], action: :by_id
    define :done, action: :done
    define :restore, action: :restore
  end

  actions do
    # Exposes default built in actions to manage the resource
    defaults [:update, :destroy]

    create :create do
      change relate_actor(:author)
    end

    read :read do
      prepare build(sort: [created_at: :desc], load: [:done?])
      filter expr(author_id == ^actor(:id))
    end

    # Defines custom read action which fetches post by id.
    read :by_id do
      # This action has one argument :id of type :uuid
      argument :id, :uuid, allow_nil?: false
      # Tells us we expect this action to return a single result
      get? true
      # Filters the `:id` given in the argument
      # against the `id` of each element in the resource
      filter expr(id == ^arg(:id) and author_id == ^actor(:id))
    end

    update :done do
      change set_attribute(:deleted_at, &DateTime.utc_now/0)
    end

    update :restore do
      change set_attribute(:deleted_at, nil)
    end
  end

  # Attributes are simple pieces of data that exist in your resource
  attributes do
    # Add an autogenerated UUID primary key called `:id`.
    uuid_primary_key :id
    # Add a string type attribute called `:title`
    attribute :title, :string do
      # We don't want the title to ever be `nil`
      allow_nil? false
    end

    # Add a string type attribute called `:content`
    # If allow_nil? is not specified, then content can be nil
    attribute :content, :string

    create_timestamp :created_at
    update_timestamp :updated_at

    attribute :deleted_at, :utc_datetime_usec
  end

  relationships do
    belongs_to :author, TodoApp.Accounts.User do
      api TodoApp.Accounts
      allow_nil? false
    end
  end

  calculations do
    calculate :done?, :boolean, expr(not is_nil(deleted_at))
  end
end
